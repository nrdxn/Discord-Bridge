import { ClientClass } from '@/libs/common/telegraf/src/ClientClass';
import { stripIndents } from 'common-tags';
import { Guild } from 'discord.js-selfbot-v13';
import { Markup } from 'telegraf';
import { InlineKeyboardButton } from 'telegraf/types';

export class MessageBuilder {
    constructor(private readonly client: ClientClass) {}

    public async account(accountID: string) {
        const account =
            await this.client.services.database.accounts.findById(accountID);

        const text = stripIndents(`
            üóÇ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>${account?.name ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>

            üîë –¢–æ–∫–µ–Ω: ${account?.token}
            üö¶ –°—Ç–∞—Ç—É—Å: <b>${account?.enabled ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}</b>
            
            ‚úà –ö–∞–Ω–∞–ª: <b>${account?.telegram_channel.id ? (account.telegram_channel.username ? `@${account!.telegram_channel.username}` : account.telegram_channel.name) : '–ù–µ —É–∫–∞–∑–∞–Ω'}</b>
            üìù –ü–µ—Ä–µ–≤–æ–¥: <b>${account?.translate.enabled ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}</b>
            ‚úè –ü—Ä–æ–º–ø—Ç: <b>${account?.translate.prompt ? account.translate.prompt : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>

            ‚ö° –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: <b>${account?.keyWords.length}</b>
            ‚õî –°—Ç–æ–ø —Å–ª–æ–≤–∞: <b>${account?.stopWords.length}</b>

            üè† –°–µ—Ä–≤–µ—Ä–æ–≤: <b>${this.client.providers.get(accountID)?.guilds.cache.size ?? 0}</b>
            üí¨ –ß–∞—Ç–æ–≤: <b>${account?.discord_channels.length}</b>
        `);

        const markups = {
            ...Markup.inlineKeyboard([
                [
                    Markup.button.callback(
                        `${account?.enabled ? 'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å' : 'üîò –í–∫–ª—é—á–∏—Ç—å'}`,
                        `ChangeEnabled-Account-${accountID}`
                    )
                ],
                [
                    Markup.button.callback(
                        'üóÇ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ',
                        `Collector-Name-${accountID}`
                    )
                ],
                [
                    Markup.button.callback('üí¨ –ß–∞—Ç—ã', `Chats-${accountID}`),
                    Markup.button.callback('üè† –°–µ—Ä–≤–µ—Ä–∞', `Guilds-${accountID}`)
                ],
                [
                    Markup.button.callback(
                        '‚ö° –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞',
                        `Filters-keyWords-${accountID}`
                    ),
                    Markup.button.callback(
                        '‚õî –°—Ç–æ–ø —Å–ª–æ–≤–∞',
                        `Filters-stopWords-${accountID}`
                    )
                ],
                [
                    Markup.button.callback(
                        `${account?.translate.enabled ? 'üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥' : 'üîò –í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥'}`,
                        `ChangeEnabled-Translate-${accountID}`
                    ),
                    Markup.button.callback(
                        '‚úè –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç',
                        `Collector-Prompt-${accountID}`
                    )
                ],
                [
                    Markup.button.url(
                        '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª',
                        'https://t.me/DiscordParserRobot?startchannel=true'
                    ),
                    Markup.button.callback(
                        '‚úà –£–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞',
                        `Collector-TelegramChannel-${accountID}`
                    )
                ],
                [
                    Markup.button.callback(
                        `üóë –£–¥–∞–ª–∏—Ç—å`,
                        `Back-Delete-${accountID}`
                    )
                ],
                [Markup.button.callback(`¬´ –ù–∞–∑–∞–¥`, `Back-Main-${accountID}`)]
            ])
        };

        return { text, markups };
    }

    public async main() {
        const accounts = await this.client.services.database.accounts.findAll();
        const text = 'üîç –í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:';

        const buttons = await Promise.all(
            accounts.map(async (account) =>
                Markup.button.callback(
                    `${account?.name ?? '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'} (id: ${account?.id})`,
                    `OpenAccount-${account?.id}`
                )
            )
        );

        const markups = {
            ...Markup.inlineKeyboard([
                buttons,
                [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'AddAccount')]
            ])
        };

        return { text, markups };
    }

    public async accountGuilds(accountID: string, page = 0) {
        const from = page * 15;
        const to = from + 15;
        const account = this.client.providers.get(accountID);
        const guilds = account?.guilds.cache.map((g) => g);
        const formatedGuilds = guilds?.slice(from, to);
        const nextPageValid = guilds?.slice(from, to + 1);
        page++;

        let rows: Guild[][] = [];
        let manageRows: InlineKeyboardButton.CallbackButton[] = [];

        const text = stripIndents(`
            ‚Äî„Éª –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞:

            ${formatedGuilds?.map((guild, i) => `#${from + i + 1}. ${guild.name}`).join('\n') || '–ü—É—Å—Ç–æ...'}

            –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}/${Math.ceil(guilds!.length / 15) || 1}
        `);

        for (let i = 0; i < formatedGuilds!.length; i += 5) {
            rows.push(formatedGuilds!.slice(i, i + 5));
        }

        const buttons = rows.map((row, j) =>
            row.map((guild, i) =>
                Markup.button.callback(
                    `üóë ${from + j * 5 + i + 1}`,
                    `LeaveGuild-${guild.id}-${accountID}-${page}`
                )
            )
        );

        if (page !== 1) {
            manageRows.push(
                Markup.button.callback(
                    '‚óÄ',
                    `GuildPagination-Back-${page}-${accountID}`
                )
            )
        }

        if (nextPageValid!.length >= 16) {
            manageRows.push(
                Markup.button.callback(
                    '‚ñ∂',
                    `GuildPagination-Next-${page}-${accountID}`
                )
            )
        }

        const markups = {
            ...Markup.inlineKeyboard([
                ...buttons,
                manageRows,
                /*
                [
                    Markup.button.callback(
                        '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä',
                        `Collector-Guild-${accountID}`
                    )
                ],
                */
                [Markup.button.callback(`¬´ –ù–∞–∑–∞–¥`, `Back-Account-${accountID}`)]
            ])
        };

        return { text, markups };
    }

    public async accountChats(accountID: string, page = 0) {
        const from = page * 15;
        const to = from + 15;
        const account =
            await this.client.services.database.accounts.findById(accountID);
        const chatsFormated = account!.discord_channels.slice(from, to);
        const nextPageValid = account!.discord_channels.slice(from, to + 1);
        page++;

        let chatRows: DiscordChannelDto[][] = [];
        let manageRows: InlineKeyboardButton.CallbackButton[] = [];

        const text = stripIndents(`
            ‚Äî„Éª –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞:

            ${chatsFormated?.map((chat, i) => `#${from + i + 1}. ${chat.name} (—Å–µ—Ä–≤–µ—Ä: ${chat.guild})`).join('\n') || '–ü—É—Å—Ç–æ...'}

            –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}/${Math.ceil(account!.discord_channels.length / 15) || 1}
        `);

        for (let i = 0; i < chatsFormated.length; i += 5) {
            chatRows.push(chatsFormated.slice(i, i + 5));
        }

        const buttons = chatRows.map((row, j) =>
            row.map((chat, i) =>
                Markup.button.callback(
                    `üóë ${from + j * 5 + i + 1}`,
                    `DeleteChat-${chat.id}-${accountID}-${page}`
                )
            )
        );

        if (page !== 1) {
            manageRows.push(
                Markup.button.callback(
                    '‚óÄ',
                    `ChatPagination-Back-${page}-${accountID}`
                )
            )
        }

        if (nextPageValid.length >= 16) {
            manageRows.push(
                Markup.button.callback(
                    '‚ñ∂',
                    `ChatPagination-Next-${page}-${accountID}`
                )
            )
        }

        const markups = {
            ...Markup.inlineKeyboard([
                ...buttons,
                manageRows,
                [
                    Markup.button.callback(
                        '‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç',
                        `Collector-DiscordChannel-${accountID}`
                    )
                ],
                [Markup.button.callback(`¬´ –ù–∞–∑–∞–¥`, `Back-Account-${accountID}`)]
            ])
        };

        return { text, markups };
    }

    public async accountFilters(
        accountID: string,
        type: 'keyWords' | 'stopWords',
        page = 0
    ) {
        const from = page * 15;
        const to = from + 15;
        const account =
            await this.client.services.database.accounts.findById(accountID);
        const filtersFormated = account![type].slice(from, to);
        const nextPageValid = account![type].slice(from, to + 1);
        page++;

        let rows: string[][] = [];
        let manageRows: InlineKeyboardButton.CallbackButton[] = [];

        const text = stripIndents(`
            ‚Äî„Éª –°–ø–∏—Å–æ–∫ ${type === 'keyWords' ? '–∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤' : '—Å—Ç–æ–ø —Å–ª–æ–≤'}:

            ${filtersFormated?.map((word, i) => `#${from + i + 1}. ${word}`).join('\n') || '–ü—É—Å—Ç–æ...'}

            –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}/${Math.ceil(account![type].length / 15) || 1}
        `);

        for (let i = 0; i < filtersFormated.length; i += 5) {
            rows.push(filtersFormated.slice(i, i + 5));
        }

        const buttons = rows.map((row, j) =>
            row.map((_, i) =>
                Markup.button.callback(
                    `üóë ${from + j * 5 + i + 1}`,
                    `DeleteFilter-${type}-${from + j * 5 + i}-${accountID}-${page}`
                )
            )
        );

        if (page !== 1) {
            manageRows.push(
                Markup.button.callback(
                    '‚óÄ',
                    `FilterPagination-Back-${page}-${accountID}-${type}`
                )
            )
        }

        if (nextPageValid.length >= 16) {
            manageRows.push(
                Markup.button.callback(
                    '‚ñ∂',
                    `FilterPagination-Next-${page}-${accountID}-${type}`
                )
            )
        }

        const markups = {
            ...Markup.inlineKeyboard([
                ...buttons,
                manageRows,
                [
                    Markup.button.callback(
                        '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞',
                        `Collector-${type}-${accountID}`
                    )
                ],
                [Markup.button.callback(`¬´ –ù–∞–∑–∞–¥`, `Back-Account-${accountID}`)]
            ])
        };

        return { text, markups };
    }
}
